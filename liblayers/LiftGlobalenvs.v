Require Import LiftMem.
Require Import Globalenvs.

Section LIFTDERIVED.
  Context `{Hlift: LiftMemoryStates}.
  Context {F V: Type}.

  Theorem lift_store_init_data (ge: Genv.t F V) m b ofs i:
    Genv.store_init_data ge m b ofs i =
    lift (fun m => Genv.store_init_data ge m b ofs i) m.
  Proof with lift_auto.
    destruct i...
    destruct (Genv.find_symbol ge i)...
  Qed.

  Theorem lift_store_init_data_list (ge: Genv.t F V) m b ofs li:
    Genv.store_init_data_list ge m b ofs li =
    lift (fun m => Genv.store_init_data_list ge m b ofs li) m.
  Proof with lift_auto.
    revert m b ofs.
    induction li; intros...
    rewrite lift_store_init_data...
    destruct (Genv.store_init_data ge (Lens.get π m) b ofs a)...
    rewrite IHli...
    destruct (Genv.store_init_data_list ge b0 b _ li)...
  Qed.

  Theorem lift_store_zeros (ge: Genv.t F V) m b ofs len:
    store_zeros m b ofs len =
    lift (fun m => store_zeros m b ofs len) m.
  Proof with lift_auto.
    lift_unfold.
    generalize (eq_refl (Lens.get π m)).
    generalize (Lens.get π m) at 2 3.
    functional induction (store_zeros m b ofs len); intros bm Hbm.
    * functional induction (store_zeros bm b p n)...
    * rewrite (IHo _ eq_refl); clear IHo.
      rewrite (store_zeros_equation bm b p n).
      rewrite e...
      subst.
      rewrite e0l.
      destruct (store_zeros _ _ _ _)...
    * rewrite (store_zeros_equation bm b p n)...
      rewrite e.
      subst.
      destruct (Memtype.Mem.store _ _ _ _ _)...
  Qed.

  Theorem lift_alloc_global (ge: Genv.t F V) m idg:
    Genv.alloc_global ge m idg =
    lift (fun m => Genv.alloc_global ge m idg) m.
  Proof with lift_auto.
    destruct idg as [id g]...
    destruct g...
    * destruct (Memtype.Mem.alloc _ _ _)...
      destruct (Memtype.Mem.drop_perm b b0 0 1 Memtype.Nonempty)...
    * destruct (Memtype.Mem.alloc _ _ _)...
      rewrite lift_store_zeros...
      destruct (store_zeros _ b0 0 _)...
      rewrite lift_store_init_data_list...
      destruct (Genv.store_init_data_list _ _ _ _ _)...
      destruct (Memtype.Mem.drop_perm _ _ _)...
  Qed.

  Theorem lift_alloc_globals (ge: Genv.t F V) m gl:
    Genv.alloc_globals ge m gl =
    lift (fun m => Genv.alloc_globals ge m gl) m.
  Proof with lift_auto.
    revert m; induction gl; intros m...
    rewrite lift_alloc_global...
    destruct (Genv.alloc_global _ _ _)...
    rewrite IHgl...
    destruct (Genv.alloc_globals ge b gl)...
  Qed.

  Theorem lift_init_mem (p: AST.program F V):
    Genv.init_mem (mem := mem) p =
    lift (fun m => Genv.init_mem (mem := bmem) p) Memtype.Mem.empty.
  Proof with lift_auto.
    unfold Genv.init_mem...
    rewrite lift_alloc_globals...
  Qed.
End LIFTDERIVED.

Hint Rewrite
  @lift_store_init_data
  @lift_store_init_data_list
  @lift_store_zeros
  @lift_alloc_global
  @lift_alloc_globals
  @lift_init_mem
  using typeclasses eauto : lift.
